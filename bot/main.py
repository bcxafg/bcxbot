import asyncio
import logging
import os
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties
from datetime import datetime

from config import TOKEN, DEBUG
from handlers import register_handlers
from inline_handler import register_inline_handler


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(f'bot_{datetime.now().strftime("%Y%m%d")}.log')
    ]
)
logger = logging.getLogger(__name__)


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–±—Ö—É–∫–∞
WEBHOOK_DOMAIN = os.getenv('WEBHOOK_DOMAIN', 'bcxbot.duckdns.org')
WEBHOOK_PATH = f"/{TOKEN}"
WEBHOOK_URL = f"https://{WEBHOOK_DOMAIN}{WEBHOOK_PATH}"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
WEBAPP_HOST = '0.0.0.0'  # –°–ª—É—à–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
WEBAPP_PORT = 8443


async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")


async def on_shutdown(bot: Bot):
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω")


async def handle_update(request: web.Request):
    bot = request.app['bot']
    dispatcher = request.app['dispatcher']
    update = await request.json()
    await dispatcher.feed_raw_update(bot, update)
    return web.Response()


async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    session = AiohttpSession()
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML.value), session=session)

    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_handlers(dp)
    register_inline_handler(dp)

    if DEBUG:
        # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å long polling
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ DEBUG (Polling)")
        await dp.start_polling(bot)
    else:
        # –ü—Ä–æ–¥–∞–∫—à–Ω-—Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ PRODUCTION (Webhook)")

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è aiohttp
        app = web.Application()
        app['bot'] = bot
        app['dispatcher'] = dp
        app.router.add_post(WEBHOOK_PATH, handle_update)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—É–∫–æ–≤ –Ω–∞ –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        app.on_startup.append(lambda _: on_startup(bot))
        app.on_shutdown.append(lambda _: on_shutdown(bot))

        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, WEBAPP_HOST, WEBAPP_PORT)
        await site.start()

        logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        try:
            while True:
                await asyncio.sleep(3600)  # –°–ø–∞—Ç—å —á–∞—Å
        except (KeyboardInterrupt, SystemExit):
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")

if __name__ == "__main__":
    asyncio.run(main())

"""
docker-compose run --rm certbot certonly --webroot \
  --webroot-path /var/www/certbot \
  --email office@afg.ge \
  --agree-tos \
  --no-eff-email \
  -d bcxbot.duckdns.org
  
"""